extern fn printf(str: i8*, ...): void;

struct Point {
    x: i32;
    y: i32;
}


enum Literal {
    Void,
    String { size: i32; bytes: i8* }
    Number { value: i32 }
    Point { point: Point }
}

fn print_enum(a: Literal): void {
    switch (a) {
        case Literal::Number => (a_num: Literal::Number) {
            printf("Number(%d)\n", a_num.value);
        }
        case Literal::Point => (a_p: Literal::Point) {
            printf("Point (%d, %d)\n", a_p.point.x, a_p.point.y);
        }
        case Literal::Void:
            printf("Void\n");
        default:
            printf("Void\n");
    }

    return;
}

fn main(): i32 
{
    let a: Literal = Literal::String {
        .size = 5,
        .bytes = "lumpy"
    };

    let b = 5;

    let lit_pool: Literal[20];

    lit_pool[1] = Literal::String {
        .size = 11,
        .bytes = "who is this"
    };
    print_enum(lit_pool[1]);

    if (a is Literal::String) {
        if (b == 4) {
            printf("4\n");
        } else if (b == 5) {
            printf("5\n");
        }
    } else if (a is Literal::Void) {
        printf("???\n");
    } else {
        print_enum(a);
    }

    return 1;
}