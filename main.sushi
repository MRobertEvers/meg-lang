extern fn printf(str: i8*, ...): void;

struct Point {
    x: i32;
    y: i32;
}


enum Literal {
    Void,
    String { size: i32; bytes: i8* }
    Number { value: i32 }
    Point { point: Point }
}

fn print_enum(a: Literal): void {
    switch (a) {
        case Literal::Number => (a_num: Literal::Number) {
            printf("Number(%d)\n", a_num.value);
        }
        case Literal::String => (a_str: Literal::String) {
            printf("String (%.*s)\n", a_str.size, a_str.bytes);
        } 
        case Literal::Point => (a_p: Literal::Point) {
            printf("Point (%d, %d)\n", a_p.point.x, a_p.point.y);
        }
        case Literal::Void:
            printf("Void\n");
    }

    return;
}

fn main(): i32 
{
    let a: Literal = Literal::String {
        .size = 5,
        .bytes = "lumpy"
    };

    print_enum(a);
    
    return 1;
}