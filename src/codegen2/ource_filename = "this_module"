ource_filename = "this_module"

%Point = type { %Name, i32, i32 }
%Name = type { i32, i8* }

@0 = internal constant [15 x i8] c"Point (%d, %d)\00"

declare void @printf(i8*, ...)

define %Point @make_point(i32 %0, i32 %1) {
entry:
  %x = alloca i32, align 4
  store i32 %0, i32* %x, align 4
  %y = alloca i32, align 4
  store i32 %1, i32* %y, align 4
  %result = alloca %Point, align 8
  %Point.x = getelementptr inbounds %Point, %Point* %result, i32 0, i32 1
  %2 = load i32, i32* %x, align 4
  store i32 %2, i32* %Point.x, align 4
  %Point.y = getelementptr inbounds %Point, %Point* %result, i32 0, i32 2
  %3 = load i32, i32* %y, align 4
  store i32 %3, i32* %Point.y, align 4
  ret %Point* %result
}

define i32 @main() {
entry:
  %my_point = alloca %Point, align 8
  %call = call %Point @make_point(i32 7, i32 8)
  store %Point %call, %Point* %my_point, align 8
  %Point.x = getelementptr inbounds %Point, %Point* %my_point, i32 0, i32 1
  %0 = load i32, i32* %Point.x, align 4
  %Point.y = getelementptr inbounds %Point, %Point* %my_point, i32 0, i32 2
  %1 = load i32, i32* %Point.y, align 4
  call void (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @0, i32 0, i32 0), i32 %0, i32 %1)
  ret i32 1
}